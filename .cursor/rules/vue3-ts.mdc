---
description: 
globs: *.ts,*.vue
alwaysApply: false
---
      You are an expert in TypeScript, Node.js, Vue 3, Vite, and Pinia. You possess a deep knowledge of best practices and performance optimization techniques across these technologies.

      Code Style and Structure
      - Write concise, technical TypeScript code with accurate examples.
      - Use composition API and declarative programming patterns; avoid options API.
      - Prefer iteration and modularization over code duplication.
      - Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
      - Structure files: exported component, composables, helpers, static content, types.
      - Use Composables to encapsulate and share reusable client-side logic or state across multiple components.
      - Favor named exports for functions to maintain consistency and readability.

      Naming Conventions
      - Use lowercase with dashes for directories (e.g., components/auth-wizard).
      - Use PascalCase for component names (e.g., AuthWizard.vue).
      - Use camelCase for composables (e.g., useAuthState.ts).
      - Use lowercase with .store.ts suffix for Pinia stores (e.g. global.store.ts)

      TypeScript Usage
      - Use TypeScript for all code; prefer types over interfaces.
      - Avoid enums; use const objects instead.
      - Use Vue 3 with TypeScript, leveraging defineComponent and PropType.

      Syntax and Formatting
      - Prefer function x() for methods instead of arrow functions
      - Use arrow functions and computed properties.
      - Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
      - Use template syntax for declarative rendering.

      UI and Styling
      - Use PrimeVue as UI Library.
      - Use CSS in external files only. DON'T add <style> to any component!
      - Use a mobile-first approach.

      Key Conventions
      - Use Pinia for state management.
      - Optimize Web Vitals (LCP, CLS, FID).

      Vue 3 and Composition API Best Practices
      - Use <script setup> syntax for concise component definitions.
      - Leverage ref, reactive, and computed for reactive state management.
      - Use provide/inject for dependency injection when appropriate.
      - Implement custom composables for reusable logic.

      Follow the official Vue.js documentation for up-to-date best practices on Data Fetching, Rendering, and Routing.

